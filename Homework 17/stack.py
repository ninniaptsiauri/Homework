# ვქმნით Node კლასს, stack-ის თითოეული ელემენტისთვის
class Node:
    def __init__(self, data=None): # აღვწერთ init-ს რომ გააკეთოს data-ს და next-ის ინიციალიზაცია(ატრიბუტად ვიღებთ მხოლოდ data-ს)
        self.data = data # data-ს ინნიციალიზაცია და მონაცემების შენახვა  data-ში
        self.next = None # # შემდეგი ობიექტის მდებაორეობა იქნება None, რადგან ლისტი შესაძლოა იყოს ერთელემენტიანი


# ვქმნით Stack კლასს
class Stack:
    def __init__(self): 
        self.top_node = None # stack-ში ზედა ელემენტი არის top, და მას ვანიჭებს None მნიშვნელობას, სანამ ცარიელია სტეკი
        self.length = 0 # სტეკის სიგრძე არის 0 რადგან ცარიელია 

    # მეთოდი იმის შესამოწმებლად, არის თუ არა სტეკი ცარიელი
    def empty(self): 
        return self.length == 0 # თუ სტეკის სიგრძე არის 0, მაშინ სტეკი ცარიელია  

    # მეთოდი იმის გასაგებად, თუ რა რაოდენობის ინფორმაციაა სტეკში შეყვანილი
    def size(self):
        return self.length # აბრუნებს სტეკში არსებული ელემენტების რაოდენობას

    # ვქმნით მეთოდს სტეკში ახალი ელემენტის დასამატებლად
    def push(self, data): # ატრიბუტად ვიღებთ data-ს
        new_node = Node(data) # ახალი ნოუდი ატრიბუტად მიიღებს მომხმარებლისგან გადმოწოდებულ data-ს
        new_node.next = self.top_node # ახალი ელემენტის შემდეგი ელემენტი უნდა გახდეს top_node
        self.top_node = new_node # top_node ხდება სტეკის პირველი ელემენტი
        self.length += 1 # სტეკის სიგრძე იზრდება ერთით

    # ვქმნით წაშლის მეთოდს
    def pop(self): # ატრიბუტს არ იღებს რადგან აბრუნებს top_node
        if not self.empty(): # ვამოწმებთ თუ სტეკი არ არის ცარიელი
            popped_item = self.top_node.data # ვქმნით popped_item ცვლადს, რომ არ დავკარგოთ წაშლილი ელემენტის მნიშვნელობა და შევძლოთ დარეთარნება  
            self.top_node = self.top_node.next # top node-ის ამოსაშლელად მის მნიშვნელობას ვცვლით მის next-ში შენახულით
            self.length -= 1 # სტეკის ელემენტების რაოდენობა მცირდება ერთით
            return popped_item # ვარეთარნებთ წაშლილ ელემენტს
        else: # თუ სტეკი არის ცარიელი
            raise IndexError('Stack is empty') # ვიწვევთ indexerror-ს

# ვქმნით Stack-ის ობიექტს
stack = Stack() 
# print(stack.empty()) # ვამოწმებთ და ვბეჭდავთ არის თუ არა სტეკი ცარიელი
# print(stack.size()) # ვბეჭდავთ სტეკის ელემენტების რაოდენობას

# stack-დან ვიძახებთ push მეთოდს და გადავცემთ data-s 
stack.push(10)
stack.push(11)
stack.push(12)
stack.push(13)
# print(stack.empty()) # ელემენტების დამატების შემდეგ ვამოწმებთ და ვბეჭდავთ არის თუ არა სტეკი ცარიელი
# print(stack.size()) # ვბეჭდავთ სტეკის ელემენტების რაოდენობას


print(stack.pop()) # stack-დან ვიძახებთ pop-ს დამატებული ელემენტების წასაკითხად, ამოიშლება ბოლო ელემენტი
print(stack.pop()) # pop-ის ყოველი შემდეგი გამოძახებისას წაიშლება ბოლო ელემენტი და შემდეგ ჯერზე დაიბეჭდება ბოლოს წინა ელემენტი
print(stack.pop())
print(stack.pop())
print(stack.pop()) 
# print(stack.empty()) # ელემენტების წაშლის შემდეგ ვამოწმებთ და ვბეჭდავთ არის თუ არა სტეკი ცარიელი
# print(stack.size()) # ვბეჭდავთ სტეკის ელემენტების რაოდენობას